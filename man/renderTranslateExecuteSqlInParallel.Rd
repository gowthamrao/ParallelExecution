% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RenderTranslateExecuteSqlInParallel.R
\name{renderTranslateExecuteSqlInParallel}
\alias{renderTranslateExecuteSqlInParallel}
\title{Render, Translate, and Execute SQL Queries in Parallel Across Multiple CDM Sources}
\usage{
renderTranslateExecuteSqlInParallel(
  cdmSources,
  sequence = 1,
  sql,
  tempEmulationSchema = getOption("sqlRenderTempEmulationSchema"),
  databaseIds = getListOfDatabaseIds(),
  userService = "OHDSI_USER",
  passwordService = "OHDSI_PASSWORD",
  ...
)
}
\arguments{
\item{cdmSources}{A dataframe containing details of the CDM sources.}

\item{sequence}{A sequence number to filter the CDM sources, defaults to 1.}

\item{sql}{The SQL query string to be executed.}

\item{tempEmulationSchema}{Temporary schema for SQL Render emulation, obtained from global option 'sqlRenderTempEmulationSchema' if not provided.}

\item{databaseIds}{A vector of database IDs to filter the CDM sources, obtained from the getListOfDatabaseIds() function if not provided.}

\item{userService}{The user service credential key, defaults to "OHDSI_USER".}

\item{passwordService}{The password service credential key, defaults to "OHDSI_PASSWORD".}

\item{...}{Additional parameters that may be passed to the SQL rendering and translation functions.}
}
\description{
This function is designed to execute SQL queries across multiple Common Data Model (CDM) sources in parallel.
It filters the CDM sources based on specified criteria, renders and translates SQL queries for each source,
and then executes them in parallel using a cluster of worker nodes.
}
